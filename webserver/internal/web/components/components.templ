package components

import "shahin/webserver/internal/types"
import "net/url" 
import "log/slog"

templ Head(title string){
    
    <head>
    <script src="https://cdn.tailwindcss.com"></script>
        <link rel="icon" type="image/svg+xml" href="">
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
        <title>{title}</title>
        <link rel="stylesheet" href="/static/styles.css" />
    </head>
}


templ Header(){
    
<header class="w-full bg-white shadow-md">
  <div class="max-w-6xl mx-auto flex items-center justify-between h-12 px-4">
    <!-- Logo + Brand -->
    <div class="flex items-center gap-2">
      <img src="/static/seb.svg" alt="Logo" class="w-12 h-12 object-contain" />
    </div>

    <!-- Navigation Links -->
    <nav class="flex items-center gap-6 text-gray-700 text-sm font-medium">
      <a href="/" class="hover:text-blue-600 transition">Home</a>
      <a href="/data" class="hover:text-blue-600 transition">Data</a>
      <form action="/api/logout" method="POST">
        <button type="submit" class="hover:text-red-500 transition">Logout</button>
      </form>
    </nav>
  </div>
</header>

}

templ Footer(path string){

    <footer>
    <p></p>

    <script src={path}></script>
    </footer>
}



// save for highlights but do this in backend and return matched words
// or at least evaluate that option
// <span class='bg-yellow-200 px-1'>${query}</span>
templ Results(matches []types.Match){
    for _, match := range matches {
        {{
            URL, err := url.Parse(match.FileUrl)
            if err != nil{
                slog.Error("faild to parse url")
                }


        }}

        
        <ul>
            <div class="bg-white p-4 rounded-xl shadow border">
                <div class="flex justify-between items-center">
                    <div class="text-lg font-semibold">
                        <a 
                            class="text-blue-600 hover:underline"
                            href={"/view?filename=" + match.FileUrl + "&search=" + url.QueryEscape(match.Meta)}
                            target="_blank"
                            rel="noopener noreferrer"
                        >
                            {match.Title}
                        </a>
                    </div>
                    <a 
                        href={URL.Path}
                        title="Download or view file"
                        class="text-gray-500 hover:text-gray-800"
                        target="_blank"
                        rel="noopener noreferrer"
                    >
                        ðŸ“„
                    </a>
                </div>
                <p class="text-gray-700 mt-2">
                if match.HTML != ""{
                    @templ.Raw(match.HTML)
                } else {
                    @templ.Raw(match.Content)
                }
                </p>
                <div class="mt-2 text-sm text-gray-500">page {match.PageNumber} Â· {match.Category}</div>
            </div>
        </ul>
    }
}

templ Files(files []types.File) {
    for _, file := range files {
        <ul class="space-y-2">
            <li class="bg-white shadow rounded-lg p-4 flex items-center justify-between">
                <div>
                    <div class="text-gray-800 font-medium">{file.Filename}</div>
                    <div class="text-sm text-gray-500">
                        Uploaded {file.UploadedAt.Format("Jan 2, 2006 at 15:04")}
                    </div>
                </div>
                <form method="POST"  class="ml-4 delete-form" data-id={file.PdfID}>
                    <input type="hidden" name="filename" value={file.Filename} />
                    <button type="submit"
                        class="text-sm text-white bg-red-600 hover:bg-red-700 px-3 py-1 rounded transition">
                        Delete
                    </button>
                </form>
            </li>
        </ul>
    }
}
